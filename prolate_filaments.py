from __future__ import print_functionfrom pyfits import getdataimport numpy as npdef oneovere(z, omega_l=0.714):    "Routine to compute 1/E(z) for angular diameter distance calculation"    omega_m = 1. - omega_l    return 1. / np.sqrt(omega_m * np.power(1 + z, 3.) + omega_l)def comdist(z, h0=69.6, omega_l=0.714):    "Routine to compute comoving distance"    from scipy import integrate    c = 2.99792458e5    dh = c / h0    dm = integrate.quad(oneovere, 0, z, args=omega_l)    return dh * dm[0]fitcat = 'UDF'data = getdata('../../%s/cats/laes+galfit.fits' % fitcat, 1)t = data['position_angle_acs_814w']ids = data['id']ax = data['axis_ratio_acs_814w']z = data['z_muse']ra = data['RA']dec = data['DEC']single = data['single']cool = single#(ax<1)ids = ids[cool]nid = len(ids)i1 = []i2 = []ds = []dt = []for i in range(nid):    for j in range(nid):        if i!=j:            ra1, dec1 = ra[i], dec[i]  # type: (object, object)            ra2, dec2 = ra[j], dec[j]            theta = np.sqrt(((ra1 - ra2) * np.cos((dec1 + dec2) / 2. * np.pi / 180.)) ** 2 + (dec1 - dec2) ** 2)            d1 = comdist(z[i])            d2 = comdist(z[j])            cdmin = min(d1, d2)            cd = abs(d1-d2)            proj_cd = theta * np.pi / 180. * cdmin            com_dist = np.sqrt(proj_cd * proj_cd + cd * cd)            dt.append(t[j]-t[i])            ds.append(com_dist)            i1.append(ids[i])            i2.append(ids[j])dt = np.array(dt)Q1 = (dt>0) & (dt<=90)Q2 = (dt>90)Q3 = (dt<=-90)Q4 = (dt>-90) & (dt<=0)theta = dt*Q1+(180-dt)*Q2+(180+dt)*Q3+abs(dt)*Q4if 0:    far = np.where(d>20)[0]    n2 = np.sum(d<2)    n5 = np.sum(d<5)    n10 = np.sum(d<10)    n20 = np.sum(d<20)    d2 = np.random.choice(far, n2)    d5 = np.random.choice(far, n5)    d10 = np.random.choice(far, n10)    d20 = np.random.choice(far, n20)np.savetxt('../../%s/cats/thetas.dat' % fitcat,           np.array([i1,i2,theta,ds]).T, header='i1 i2 theta d')